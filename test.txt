aW1wb3J0IHBzdXRpbApIgKyBzdHIoZSksCiAgICAgICAgICAgICJPJ3Fpc2ggdGV6bGlnaSI6ICJYYXRvOiAiICsgc3RyKGUpCiAgICAgICAgfQoKIyBEaXNrIG1hJ2x1bW90bGFyaW5pIG9saXNoIHZhIHRlemxpa25pIHRlc3QgcWlsaXNoIGZ1bmtzaXlhc2kKZGVmIGdldF9kaXNrX2luZm8obW91bnRfcG9pbnQsIGxhYmVsKToKICAgIHRyeToKICAgICAgICBkaXNrX3VzYWdlID0gcHN1dGlsLmRpc2tfdXNhZ2UobW91bnRfcG9pbnQpCiAgICAgICAgaW5mbyA9IHsKICAgICAgICAgICAgIlVtdW1peSBoYWptIjogZm9ybWF0X3NpemUoZGlza191c2FnZS50b3RhbCksCiAgICAgICAgICAgICJCbydzaCBqb3kiOiBmb3JtYXRfc2l6ZShkaXNrX3VzYWdlLmZyZWUpLAogICAgICAgICAgICAiSXNobGF0aWxnYW4iOiBmb3JtYXRfc2l6ZShkaXNrX3VzYWdlLnVzZWQpLAogICAgICAgICAgICAiRm95ZGFsYW5pc2ggZm9pemkiOiBmIntkaXNrX3VzYWdlLnBlcmNlbnR9ICUiCiAgICAgICAgfQogICAgICAgIAogICAgICAgICMgWW96aXNoIHZhIG8ncWlzaCB0ZXpsaWdpCiAgICAgICAgdGVzdF9wYXRoID0gUGF0aChtb3VudF9wb2ludCkgLyAidGVzdGZpbGUuYmluIgogICAgICAgIHNwZWVkX3Jlc3VsdHMgPSB0ZXN0X3N0b3JhZ2Vfc3BlZWQodGVzdF9wYXRoLCBsYWJlbCkKICAgICAgICBpbmZvLnVwZGF0ZShzcGVlZF9yZXN1bHRzKQogICAgICAgIAogICAgICAgIHJldHVybiBpbmZvCiAgICBleGNlcHQgRXhjZXB0aW9uIGFzIGU6CiAgICAgICAgcmV0dXJuIHtmIntsYWJlbH0geGF0byI6ICJNYSdsdW1vdGxhcm5pIG9saXNoZGEgbXVhbW1vIHl1eiBiZXJkaSJ9CgojIERpc2sgbydxaXNoIHZhIHlvemlzaCB0ZXpsaWdpbmkgdGVzdCBxaWxpc2gKZGVmIHRlc3Rfc3RvcmFnZV9zcGVlZChwYXRoLCBsYWJlbCk6CiAgICB0cnk6CiAgICAgICAgc3RhcnRfdGltZSA9IHRpbWUudGltZSgpCiAgICAgICAgd2l0aCBvcGVuKHBhdGgsICd3YicpIGFzIGY6CiAgICAgICAgICAgIGYud3JpdGUoYiIwIiAqIDEwKio2KSAgIyAxIE1CIG1hJ2x1bW90IHlvemlzaAogICAgICAgIHdyaXRlX3RpbWUgPSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUKICAgICAgICB3cml0ZV9zcGVlZCA9IDEwKio2IC8gd3JpdGVfdGltZQogICAgICAgIAogICAgICAgIHN0YXJ0X3RpbWUgPSB0aW1lLnRpbWUoKQogICAgICAgIHdpdGggb3BlbihwYXRoLCAncmInKSBhcyBmOgogICAgICAgICAgICBkYXRhID0gZi5yZWFkKCkKICAgICAgICByZWFkX3RpbWUgPSB0aW1lLnRpbWUoKSAtIHN0YXJ0X3RpbWUKICAgICAgICByZWFkX3NwZWVkID0gMTAqKjYgLyByZWFkX3RpbWUKICAgICAgICAKICAgICAgICAjIEZheWxuaSBvJ2NoaXJpc2gKICAgICAgICBvcy5yZW1vdmUocGF0aCkKICAgICAgICAKICAgICAgICByZXR1cm4gewogICAgICAgICAgICBmIntsYWJlbH0gLSBZb3ppc2ggdGV6bGlnaSI6IGZvcm1hdF9zaXplKHdyaXRlX3NwZWVkKSArICIvcyIsCiAgICAgICAgICAgIGYie2xhYmVsfSAtIE8ncWlzaCB0ZXpsaWdpIjogZm9ybWF0X3NpemUocmVhZF9zcGVlZCkgKyAiL3MiCiAgICAgICAgfQogICAgZXhjZXB0IEV4Y2VwdGlvbiBhcyBlOgogICAgICAgIHJldHVybiB7CiAgICAgICAgICAgIGYie2xhYmVsfSAtIFlvemlzaCB0ZXpsaWdpIjogIlhhdG86ICIgKyBzdHIoZSksCiAgICAgICAgICAgIGYie2xhYmVsfSAtIE8ncWlzaCB0ZXpsaWdpIjogIlhhdG86ICIgKyBzdHIoZSkKICAgICAgICB9CgojIEljaGtpIHhvdGlyYSB1Y2h1biBzdGF0aXN0aWthbmkgb2xpc2gKZGVmIGNoZWNrX2ludGVybmFsX3N0b3JhZ2UoKToKICAgIGFuaW1hdGVkX3ByaW50KCJcbvCfkr4gSWNoa2kgWG90aXJhOiIsIDAuMDMpCiAgICBpbnRlcm5hbF9zdG9yYWdlX3BhdGggPSAiQzpcXCIgICMgV2luZG93cyB1Y2h1biBpY2hraSB4b3RpcmEgeW8nbGkKICAgIGZvciBrZXksIHZhbHVlIGluIGdldF9kaXNrX2luZm8oaW50ZXJuYWxfc3RvcmFnZV9wYXRoLCAiSWNoa2kgWG90aXJhIikuaXRlbXMoKToKICAgICAgICBhbmltYXRlZF9wcmludChmIiAge2tleX06IHtjb2xvcml6ZSh2YWx1ZSwgQ1lBTil9IikKCiMgUkFNIHhvdGlyYSBzdGF0aXN0aWthc2kKZGVmIGNoZWNrX3JhbSgpOgogICAgYW5pbWF0ZWRfcHJpbnQoIlxu8J+TgiBSQU0gWG90aXJhc2k6IiwgMC4wMykKICAgIGZvciBrZXksIHZhbHVlIGluIGdldF9tZW1vcnlfaW5mbygpLml0ZW1zKCk6CiAgICAgICAgYW5pbWF0ZWRfcHJpbnQoZiIgIHtrZXl9OiB7Y29sb3JpemUodmFsdWUsIENZQU4pfSIpCiAgICAKICAgICMgUkFNIHRlemxpZ2luaSBvJ2xjaGFzaAogICAgYW5pbWF0ZWRfcHJpbnQoIlxu4pqhIFJBTSBUZXpsaWdpOiIsIDAuMDMpCiAgICBmb3Iga2V5LCB2YWx1ZSBpbiB0ZXN0X3JhbV9zcGVlZCgpLml0ZW1zKCk6CiAgICAgICAgYW5pbWF0ZWRfcHJpbnQoZiIgIHtrZXl9OiB7Y29sb3JpemUodmFsdWUsIENZQU4pfSIpCgojIFVTQiB4b3RpcmEgc3RhdGlzdGlrYXNpCmRlZiBjaGVja191c2IoKToKICAgIGFuaW1hdGVkX3ByaW50KCJcbvCflIwgVVNCIFhvdGlyYToiLCAwLjAzKQogICAgZm9yIHBhcnRpdGlvbiBpbiBwc3V0aWwuZGlza19wYXJ0aXRpb25zKCk6CiAgICAgICAgaWYgInJlbW92YWJsZSIgaW4gcGFydGl0aW9uLm9wdHM6CiAgICAgICAgICAgIHBhcnRpdGlvbl9wYXRoID0gcGFydGl0aW9uLm1vdW50cG9pbnQKICAgICAgICAgICAgcGFydGl0aW9uX2xhYmVsID0gcGFydGl0aW9uLmRldmljZQogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBnZXRfZGlza19pbmZvKHBhcnRpdGlvbl9wYXRoLCBwYXJ0aXRpb25fbGFiZWwpLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBhbmltYXRlZF9wcmludChmIiAge2tleX06IHtjb2xvcml6ZSh2YWx1ZSwgQ1lBTil9IikKCiMgVGFzaHFpIHhvdGlyYSBxdXJpbG1hbGFyaW5pIGFuaXFsYXNoCmRlZiBjaGVja19leHRlcm5hbF9kcml2ZXMoKToKICAgIGFuaW1hdGVkX3ByaW50KCJcbvCflI0gVGFzaHFpIFhvdGlyYSBRdXJpbG1hbGFyaToiLCAwLjAzKQogICAgZm9yIHBhcnRpdGlvbiBpbiBwc3V0aWwuZGlza19wYXJ0aXRpb25zKGFsbD1GYWxzZSk6CiAgICAgICAgaWYgInJlbW92YWJsZSIgaW4gcGFydGl0aW9uLm9wdHM6CiAgICAgICAgICAgIHBhcnRpdGlvbl9wYXRoID0gcGFydGl0aW9uLm1vdW50cG9pbnQKICAgICAgICAgICAgcGFydGl0aW9uX2xhYmVsID0gcGFydGl0aW9uLmRldmljZQogICAgICAgICAgICBmb3Iga2V5LCB2YWx1ZSBpbiBnZXRfZGlza19pbmZvKHBhcnRpdGlvbl9wYXRoLCBwYXJ0aXRpb25fbGFiZWwpLml0ZW1zKCk6CiAgICAgICAgICAgICAgICBhbmltYXRlZF9wcmludChmIiAge2tleX06IHtjb2xvcml6ZSh2YWx1ZSwgQ1lBTil9IikKCiMgQmFyY2hhIGRpc2tsYXJuaSB0ZWtzaGlyaXNoCmRlZiBjaGVja19hbGxfZGlza3MoKToKICAgIGFuaW1hdGVkX3ByaW50KCJcbvCflqXvuI8gQmFyY2hhIERpc2tsYXI6IiwgMC4wMykKICAgIGZvciBwYXJ0aXRpb24gaW4gcHN1dGlsLmRpc2tfcGFydGl0aW9ucygpOgogICAgICAgIHBhcnRpdGlvbl9wYXRoID0gcGFydGl0aW9uLm1vdW50cG9pbnQKICAgICAgICBwYXJ0aXRpb25fbGFiZWwgPSBwYXJ0aXRpb24uZGV2aWNlCiAgICAgICAgZm9yIGtleSwgdmFsdWUgaW4gZ2V0X2Rpc2tfaW5mbyhwYXJ0aXRpb25fcGF0aCwgcGFydGl0aW9uX2xhYmVsKS5pdGVtcygpOgogICAgICAgICAgICBhbmltYXRlZF9wcmludChmIiAge2tleX06IHtjb2xvcml6ZSh2YWx1ZSwgQ1lBTil9IikKCiMgWG90aXJhIHN0YXRpc3Rpa2FsYXJpbmkgY2hpcWFyaXNoCmRlZiBwcmludF9zdG9yYWdlX2luZm8oKToKICAgIGFuaW1hdGVkX3ByaW50KGNvbG9yaXplKCLwn5OKIFhvdGlyYSB2YSBEaXNrIFN0YXRpc3Rpa2FsYXJpOiIsIEJPTEQgKyBDWUFOKSkKICAgIHRpbWUuc2xlZXAoMSkgICMgS2ljaGlrIGtlY2hpa2lzaAoKICAgICMgVGVsZWZvbm5pbmcgaWNoa2kgeG90aXJhc2kKICAgIGNoZWNrX2ludGVybmFsX3N0b3JhZ2UoKQogICAgCiAgICAjIFJBTSB4b3RpcmEgc3RhdGlzdGlrYXNpCiAgICBjaGVja19yYW0oKQogICAgCiAgICAjIFVTQiB4b3RpcmEgc3RhdGlzdGlrYXNpCiAgICBjaGVja191c2IoKQogICAgCiAgICAjIFRhc2hxaSB4b3RpcmEgcXVyaWxtYWxhcmluaSB0ZWtzaGlyaXNoCiAgICBjaGVja19leHRlcm5hbF9kcml2ZXMoKQogICAgCiAgICAjIEJhcmNoYSBkaXNrbGFybmkgdGVrc2hpcmlzaAogICAgY2hlY2tfYWxsX2Rpc2tzKCkKCiAgICAjIERhc3R1cmNoaSBrYW5hbCBtYW5iYXNpCiAgICBhbmltYXRlZF9wcmludCgiXG7wn5ug77iPIERhc3R1cmNoaTogIiArIGNvbG9yaXplKCJAQmFsbGVyVVoiLCBCT0xEICsgQ1lBTikpCgppZiBfX25hbWVfXyA9PSAiX19tYWluX18iOgogICAgcHJpbnRfc3RvcmFnZV9pbmZvKCk=
